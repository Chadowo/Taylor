require 'json'
require 'fileutils'

require './lib/squasher'

options = {
  'name' => 'taylor_game',
  'version' => 'v0.0.1',
  'input' => 'game.rb',
  'export_directory' => './exports',
  'export_targets' => [
    'android',
    'linux',
    'windows',
    'osx',
    'web',
  ],
  'load_paths' => [
    './',
    './vendor',
  ],
  'copy_paths' => [
    './assets',
  ],
}

export_target = ENV.fetch('EXPORT', 'linux')

if File.exist?("../../include/version.hpp")
  VERSION = File.read("../../include/version.hpp").each_line.to_a.last.split('"')[1]
end

if File.exists?('/app/game/taylor-config.json')
  options.merge!(
    JSON.parse(File.read('/app/game/taylor-config.json'))
  )
end

namespace :docker do
  namespace :build do
    task :export do
      Dir.chdir('../..')
      sh "docker build . --file Dockerfile.export --tag taylor/export"
      Dir.chdir('./scripts/export')
    end

    task :android do
      sh "docker build . --file Dockerfile.android --tag taylor/export-android --tag hellrok/taylor:android-v#{VERSION} --tag hellrok/taylor:android-latest"
    end

    task :linux do
      sh "docker build . --file Dockerfile.linux --tag taylor/export-linux --tag hellrok/taylor:linux-v#{VERSION} --tag hellrok/taylor:linux-latest"
    end

    task :windows do
      sh "docker build . --file Dockerfile.windows --tag taylor/export-windows --tag hellrok/taylor:windows-v#{VERSION} --tag hellrok/taylor:windows-latest"
    end

    task :osx do
      sh "docker build . --file Dockerfile.osx --tag taylor/export-osx --tag hellrok/taylor:osx-v#{VERSION} --tag hellrok/taylor:osx-latest"
    end

    task :web do
      sh "docker build . --file Dockerfile.web --tag taylor/export-web --tag hellrok/taylor:web-v#{VERSION} --tag hellrok/taylor:web-latest"
    end

    multitask :all_platforms => [:android, :linux, :windows, :osx, :web]
    task :all => [:export, :all_platforms]
  end
end

task :squash do
  Dir.chdir('/app/game')
  Squasher.call(options)
  Dir.chdir('/app/export')
end

task :transpile => :squash
task :transpile do
  sh "mrbc -Bgame -o /app/taylor/include/game.h ./output.rb"
end

task :build => "build:setup"
task :build => "build:android" if export_target == 'android'
task :build => "build:linux"   if export_target == 'linux'
task :build => "build:windows" if export_target == 'windows'
task :build => "build:osx"     if export_target == 'osx'
task :build => "build:osx"     if export_target == 'osx_no_app'
task :build => "build:web"     if export_target == 'web'
task :build => "build:reset"

namespace :build do
  task :setup do
    Dir.chdir('/app/taylor')
  end
  task :reset do
    Dir.chdir('/app/game')
  end

  task :android do
    sh "EXPORT=1 rake android:release:build"
  end

  task :linux do
    sh "EXPORT=1 rake linux:release:build"
  end

  task :windows do
    sh "EXPORT=1 rake windows:release:build"
  end

  task :osx do
    sh "EXPORT=1 rake osx:release:build"
  end

  task :web do
    sh "EXPORT=1 rake web:release:build"
  end
end

task :rename => "rename:setup"
task :rename => "rename:android"    if export_target == 'android'
task :rename => "rename:linux"      if export_target == 'linux'
task :rename => "rename:windows"    if export_target == 'windows'
task :rename => "rename:osx"        if export_target == 'osx'
task :rename => "rename:osx_no_app" if export_target == 'osx_no_app'
task :rename => "rename:web"        if export_target == 'web'

namespace :rename do
  task :setup do
    Dir.chdir('/app/game')
    FileUtils.mkdir_p './exports'
  end

  task :android do
    puts "Copying android build"

    FileUtils.mkdir_p '/app/game/exports/android'
    FileUtils.cp Dir.glob('/app/taylor/dist/android/release/*'), '/app/game/exports/android'
  end

  task :linux do
    puts "Copying linux build"

    FileUtils.mkdir_p '/app/game/exports/linux'
    FileUtils.cp Dir.glob('/app/taylor/dist/linux/release/*'), '/app/game/exports/linux'
  end

  task :windows do
    puts "Copying windows build"

    FileUtils.mkdir_p '/app/game/exports/windows'
    FileUtils.cp Dir.glob('/app/taylor/dist/windows/release/*'), '/app/game/exports/windows'
  end

  task :osx do
    puts "Copying osx build"

    app_path = File.join(
      '/app/game/exports',
      'osx',
      "#{options['name']}.app",
      'Contents',
      'MacOS'
    )
    FileUtils.mkdir_p(app_path)
    FileUtils.cp Dir.glob('/app/taylor/dist/osx/release/*'), app_path
  end

  task :osx_no_app do
    puts "Copying osx build"

    FileUtils.mkdir_p '/app/game/exports/osx'
    FileUtils.cp Dir.glob('/app/taylor/dist/osx/release/*'), '/app/game/exports/osx'
  end

  task :web do
    puts "Copying web build"
    FileUtils.mkdir_p '/app/game/exports/web'
    FileUtils.cp Dir.glob('/app/taylor/dist/web/release/*'), '/app/game/exports/web'
    FileUtils.mv File.join('/app/game/exports/web/', "#{options['name']}.html"),
      '/app/game/exports/web/index.html'
  end
end

task :compress => "compress:setup"
task :compress => "compress:linux"      if export_target == 'linux'
task :compress => "compress:windows"    if export_target == 'windows'
task :compress => "compress:osx"        if export_target == 'osx'
task :compress => "compress:osx_no_app" if export_target == 'osx_no_app'
task :compress => "compress:web"        if export_target == 'web'
task :compress => "compress:move"


namespace :compress do
  task :setup do
    Dir.chdir('/app/game/exports')
  end

  task :move do
    sh "mv /app/game/exports/**/*.zip /app/game/exports/"
    sh "rm -rf \"/app/game/exports/#{export_target}\""
  end

  task :linux do
    Dir.chdir('/app/game/exports/linux')
    options['copy_paths'].each { |asset_path| FileUtils.cp_r(File.join('/app/game/', asset_path), '.') }
    sh "zip -r \"#{options['name']}-linux-#{options['version']}.zip\" *"
  end

  task :windows do
    Dir.chdir('/app/game/exports/windows')
    options['copy_paths'].each { |asset_path| FileUtils.cp_r(File.join('/app/game/', asset_path), '.') }
    sh "zip -r \"#{options['name']}-windows-#{options['version']}.zip\" *"
  end

  task :osx do
    Dir.chdir('/app/game/exports/osx')
    app_path = File.join('.', "#{options['name']}.app", 'Contents', 'MacOS')
    FileUtils.mkdir_p(app_path)
    File.write(File.join(app_path, '..', 'PkgInfo'), 'APPL????APPL????')
    options['copy_paths'].each { |asset_path| FileUtils.cp_r(File.join('/app/game/', asset_path), app_path) }
    sh "zip -r \"#{options['name']}-osx-#{options['version']}.zip\" *"
  end

  task :osx_no_app do
    Dir.chdir('/app/game/exports/osx')
    options['copy_paths'].each { |asset_path| FileUtils.cp_r(File.join('/app/game/', asset_path), '.') }
    sh "zip -r \"#{options['name']}-osx-#{options['version']}.zip\" *"
  end

  task :web do
    Dir.chdir('/app/game/exports/web')
    sh "zip -r \"#{options['name']}-web-#{options['version']}.zip\" *"
  end
end
